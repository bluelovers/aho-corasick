// Generated by CoffeeScript 2.3.1
var AhoCorasick, Tests;

Tests = module.exports;

AhoCorasick = require('..');

Tests['Test simple'] = function(test) {
  var ac, j, len, ref, word;
  ac = new AhoCorasick();
  ref = ['ab', 'bcr', 'caa'];
  for (j = 0, len = ref.length; j < len; j++) {
    word = ref[j];
    ac.add(word, {
      word: word
    });
  }
  ac.build_fail();
  ac.search('foab', function(found_word, data, offset) {
    test.equal(found_word, 'ab');
    test.equal(data[0].word, 'ab');
    return test.equal(offset, 2);
  });
  ac.search('bcaa', function(found_word, data, offset) {
    test.equal(found_word, 'caa');
    test.equal(data[0].word, 'caa');
    return test.equal(offset, 1);
  });
  test.expect(6);
  return test.done();
};

Tests['Picks out multiple words'] = function(test) {
  var ac, content, find_list, j, len, ref, word;
  ac = new AhoCorasick();
  ref = ['little bit of', 'receivings', 'ivi', 'boot', 'here'];
  for (j = 0, len = ref.length; j < len; j++) {
    word = ref[j];
    ac.add(word);
  }
  ac.build_fail();
  find_list = ['here', 'little bit of', 'ivi', 'boot'];
  content = 'here is a little bit of text that more closely resembles the kind of style that this library will be receiving. maybe with another sentance one to boot';
  ac.search(content, function(found_word, data, offset) {
    return test.equal(content.substr(offset, found_word.length), found_word);
  });
  test.expect(find_list.length);
  return test.done();
};

Tests['Match every'] = function(test) {
  var ac, i, j, len, match_word, ref, word;
  ac = new AhoCorasick();
  ref = ['foo', 'foo bar'];
  for (j = 0, len = ref.length; j < len; j++) {
    word = ref[j];
    ac.add(word);
  }
  ac.build_fail();
  ac.search('foo', function(found_word, data, offset) {
    test.equal(found_word, 'foo');
    return test.equal(offset, 0);
  });
  i = 0;
  match_word = ['foo', 'foo bar'];
  ac.search('foo bar', function(found_word, data, offset) {
    test.equal(found_word, match_word[i++]);
    return test.equal(offset, 0);
  });
  test.expect(6);
  return test.done();
};

Tests['Multiple matches'] = function(test) {
  var ac, actual, expect, j, len, ref, word;
  ac = new AhoCorasick();
  ref = ['say', 'she', 'shr', 'he', 'her'];
  for (j = 0, len = ref.length; j < len; j++) {
    word = ref[j];
    ac.add(word, {
      word: word
    });
  }
  ac.build_fail();
  expect = {
    she: 1,
    he: 1,
    her: 1
  };
  actual = {};
  ac.search('yasherhs', function(found_word) {
    if (actual[found_word] == null) {
      actual[found_word] = 0;
    }
    return actual[found_word]++;
  });
  test.deepEqual(actual, expect);
  test.expect(1);
  return test.done();
};

Tests['Allow attaching multiple bits of data'] = function(test) {
  var ac;
  ac = new AhoCorasick();
  ac.add('foo', 'data1');
  ac.add('foo', 'data2');
  ac.build_fail();
  ac.search('foo', function(found_word, data) {
    test.equal(data[0], 'data1');
    return test.equal(data[1], 'data2');
  });
  test.expect(2);
  return test.done();
};
